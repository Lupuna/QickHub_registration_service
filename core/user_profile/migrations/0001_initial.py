# Generated by Django 5.0.7 on 2024-11-11 14:36

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import user_profile.managers
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email filed')),
                ('phone', models.CharField(blank=True, max_length=25, null=True, validators=[django.core.validators.RegexValidator('^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$')])),
                ('image_identifier', models.UUIDField(default=uuid.UUID('1e15b59a-6618-4cf4-8a03-b370a570879b'), editable=False, help_text='uuid for image', unique=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', user_profile.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_scheme', models.PositiveSmallIntegerField(choices=[(0, 'Standard')], default=0, help_text='Color scheme for web app')),
                ('font_size', models.PositiveSmallIntegerField(default=18, validators=[django.core.validators.MaxValueValidator(30)])),
                ('user', models.OneToOneField(help_text='connection with User ', on_delete=django.db.models.deletion.CASCADE, related_name='customization', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customization',
                'verbose_name_plural': 'Customizations',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='url name')),
                ('link', models.URLField()),
                ('user', models.ForeignKey(help_text='connection with User ', on_delete=django.db.models.deletion.CASCADE, related_name='links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_message_ring', models.BooleanField(default=True)),
                ('chat_message_in_browser', models.BooleanField(default=True)),
                ('is_executor_ring', models.BooleanField(default=True)),
                ('is_executor_in_browser', models.BooleanField(default=True)),
                ('dl_expired_ring', models.BooleanField(default=True)),
                ('dl_expired_in_browser', models.BooleanField(default=True)),
                ('task_done_ring', models.BooleanField(default=True)),
                ('task_done_in_browser', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='Reminders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days_before_start_task', models.IntegerField(choices=[(1, 'За 1 день до'), (2, 'За 2 день до'), (3, 'За 3 день до')], default=1)),
                ('exact_time_of_day_before_start_task', models.IntegerField(choices=[(1, '1:00'), (2, '2:00'), (3, '3:00'), (4, '4:00'), (5, '5:00'), (6, '6:00'), (7, '7:00'), (8, '8:00'), (9, '9:00'), (10, '10:00'), (11, '11:00'), (12, '12:00'), (13, '13:00'), (14, '14:00'), (15, '15:00'), (16, '16:00'), (17, '17:00'), (18, '18:00'), (19, '19:00'), (20, '20:00'), (21, '21:00'), (22, '22:00'), (23, '23:00')], default=8)),
                ('time_before_deadline', models.IntegerField(choices=[(1, 'За 1 минут до'), (2, 'За 2 минут до'), (3, 'За 3 минут до'), (4, 'За 4 минут до'), (5, 'За 5 минут до'), (6, 'За 6 минут до'), (7, 'За 7 минут до'), (8, 'За 8 минут до'), (9, 'За 9 минут до'), (10, 'За 10 минут до'), (11, 'За 11 минут до'), (12, 'За 12 минут до'), (13, 'За 13 минут до'), (14, 'За 14 минут до'), (15, 'За 15 минут до'), (16, 'За 16 минут до'), (17, 'За 17 минут до'), (18, 'За 18 минут до'), (19, 'За 19 минут до'), (20, 'За 20 минут до'), (21, 'За 21 минут до'), (22, 'За 22 минут до'), (23, 'За 23 минут до'), (24, 'За 24 минут до'), (25, 'За 25 минут до'), (26, 'За 26 минут до'), (27, 'За 27 минут до'), (28, 'За 28 минут до'), (29, 'За 29 минут до'), (30, 'За 30 минут до'), (31, 'За 31 минут до'), (32, 'За 32 минут до'), (33, 'За 33 минут до'), (34, 'За 34 минут до'), (35, 'За 35 минут до'), (36, 'За 36 минут до'), (37, 'За 37 минут до'), (38, 'За 38 минут до'), (39, 'За 39 минут до'), (40, 'За 40 минут до'), (41, 'За 41 минут до'), (42, 'За 42 минут до'), (43, 'За 43 минут до'), (44, 'За 44 минут до'), (45, 'За 45 минут до'), (46, 'За 46 минут до'), (47, 'За 47 минут до'), (48, 'За 48 минут до'), (49, 'За 49 минут до'), (50, 'За 50 минут до'), (51, 'За 51 минут до'), (52, 'За 52 минут до'), (53, 'За 53 минут до'), (54, 'За 54 минут до'), (55, 'За 55 минут до'), (56, 'За 56 минут до'), (57, 'За 57 минут до'), (58, 'За 58 минут до'), (59, 'За 59 минут до')], default=30)),
                ('remind_about_expire_in', models.CharField(choices=[('В начале следующей недели', 'В начале следующей недели')], default='В начале следующей недели')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reminder', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reminder',
                'verbose_name_plural': 'Reminders',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_email_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='link',
            unique_together={('user', 'title')},
        ),
    ]
